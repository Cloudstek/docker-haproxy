{{- define "server" -}}
    {{- if .Address -}}
        {{- if and .Container.Node.ID .Address.HostPort -}}
            server {{ .Container.Node.Name }} {{ .Container.Node.Address.IP }}
        {{- else -}}
            {{- if .Network -}}
                server {{ .Container.Name }} {{ .Network.IP }}
            {{- else -}}
                server {{ .Container.Name }} {{ .Address.IP }}
            {{- end -}}
        {{- end -}}
    {{- else -}}
        server {{ .Container.Name }} {{ .Container.IP }}
    {{- end -}}
{{- end -}}

{{ define "backend" -}}
{{ $mode := .Mode }}
{{ $host := trim .Host }}
backend {{ $host }}_{{ $mode }}
    mode {{ $mode }}
    balance roundrobin

    {{ if eq $mode "http" -}}
    option httpclose
    option forwardfor
    {{ else }}
    option tcpka
    {{- end}}

    {{ range $container := .Containers -}}
        {{- $addrLen := len $container.Addresses -}}
        {{- $networkLen := len (where $container.Networks "Name" "proxy") -}}
        {{- if eq $networkLen 1 -}}
            {{- if eq $addrLen 1 -}}
                {{- $address := index $container.Addresses 0 -}}
                {{- $network := index (where $container.Networks "Name" "proxy") 0 -}}
                {{- template "server" (dict "Container" $container "Address" $address "Network" $network) }}
            {{ else -}}
                {{- $address := index (where $container.Addresses "Port" (coalesce $container.Env.VIRTUAL_PORT "80")) 0 -}}
                {{- $network := index (where $container.Networks "Name" "proxy") 0 -}}
                {{- template "server" (dict "Container" $container "Address" $address "Network" $network) }}
            {{- end -}}
        {{- end -}}
    {{- end }}
{{- end }}

global
    daemon
    maxconn 4096

defaults
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms

frontend http-in
    mode http
    bind *:80

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," -}}
{{ range $container := $containers }}
    acl is_{{ $container.Hostname }}_http hdr(host) -i {{ trim $host }}
    use_backend {{ trim $host }}_http if is_{{ $container.Hostname }}_http
{{ end }}
{{ end }}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," -}}
    {{- template "backend" (dict "Containers" $containers "Mode" "http" "Host" $host) }}
{{- end }}
